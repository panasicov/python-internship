name: Django tests

on:
  push:
    branches:
      - master
      - development
  pull_request:
    branches:
      - master
      - development

env:
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  DEBUG: ${{ secrets.DEBUG }}

  CORS_ORIGIN_ALLOW_ALL: ${{ secrets.CORS_ORIGIN_ALLOW_ALL }}
  CORS_ORIGIN_WHITELIST: ${{ secrets.CORS_ORIGIN_WHITELIST }}

  DB_NAME: postgres
  DB_USER: postgres
  DB_PASSWORD: postgres
  DB_HOST: localhost
  DB_PORT: 5432

  EMAIL_BACKEND: ${{ secrets.EMAIL_BACKEND }}
  EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
  EMAIL_USE_TLS: ${{ secrets.EMAIL_USE_TLS }}
  EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
  EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
  EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}

  REDIS_LOCATION: ${{ secrets.REDIS_LOCATION }}

  INTERNAL_IPS: ${{ secrets.INTERNAL_IPS }}

  RABBITMQ_USER: ${{ RABBITMQ_USER }}
  RABBITMQ_PASS: ${{ RABBITMQ_PASS }}
  RABBITMQ_HOST: ${{ RABBITMQ_HOST }}
  RABBITMQ_PORT: ${{ RABBITMQ_PORT }}
  RABBITMQ_VHOST: ${{ RABBITMQ_VHOST }}
  SENTRY_DSN: ${{ secrets.SENTRY_DSN }}

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7.0.7-alpine
        env:
          ALLOW_EMPTY_PASSWORD: yes
        ports:
          - 6379:6379
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install library
        run: poetry install --no-interaction
      #----------------------------------------------
      # Load variables from github env to .env
      #----------------------------------------------
      - name: Write .env
        uses: CallePuzzle/envvar-to-dotenv-action@0.1.0
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
        with:
          variableNames: SECRET_KEY,DEBUG
          envPath: '.env'
      #----------------------------------------------
      #              run test suite
      #----------------------------------------------
      - name: Run tests
        run: |
          source .venv/bin/activate
          python -m internship test